{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx","app.module.css"],"names":["isColor","strColor","s","Option","style","color","NewVar","onAdd","useState","varName","setVarName","type","value","onChange","e","target","onClick","Color","showColorPicker","setShowColorPicker","className","css","background","colorPicker","App","cssVars","setCssVars","code","useMemo","variablesAsCss","Object","keys","map","key","join","updateVar","app","i","oldKey","newKey","tmp","changeKey","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iMAMMA,EAAU,SAACC,GAChB,IAAMC,GAAI,IAAIC,QAASC,MAEvB,OADAF,EAAEG,MAAQJ,EACS,KAAZC,EAAEG,OAOJC,EAAiC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACrBC,mBAAS,IADY,mBAC7CC,EAD6C,KACpCC,EADoC,KAUrD,OAAO,gCACN,uBAAOC,KAAK,OAAOC,MAAOH,EAASI,SAAU,SAACC,GAAD,OAAOJ,EAAWI,EAAEC,OAAOH,UACxE,wBAAQI,QATO,WACZT,IACFA,EAAME,GACNC,EAAW,MAMZ,oCASIO,EAA+B,SAAC,GAAyB,IAAvBZ,EAAsB,EAAtBA,MAAOQ,EAAe,EAAfA,SAAe,EACfL,oBAAkB,GADH,mBACtDU,EADsD,KACrCC,EADqC,KAM7D,OACC,qBAAKC,UAAWC,IAAIhB,MAAOW,QALZ,WACfG,GAAoBD,IAIyBd,MAAO,CAAEkB,WAAYjB,GAAlE,SACC,qBAAKe,UAAWC,IAAIE,YAApB,SACCL,GAAmB,cAAC,IAAD,CAAgBb,MAAOA,EAAOQ,SAAUA,SA6DhDW,EArDQ,WAAO,IAAD,EACEhB,mBAAS,IADX,mBACrBiB,EADqB,KACZC,EADY,KAGtBC,EAAOC,mBAAQ,WACpB,IAAMC,EAAiBC,OACrBC,KAAKN,GACLO,KAAI,SAACC,GAAD,oBAAgBA,EAAhB,aAAwBR,EAAQQ,GAAhC,QACJC,KAAK,MAEP,MAAM,YAAN,OAAmBL,EAAnB,SACE,CAAEJ,IAKCU,EAAY,SAACF,EAAcrB,GAChCc,EAAW,2BACPD,GADM,kBAERQ,EAAMrB,MAWT,OAAO,sBAAKQ,UAAWC,IAAIe,IAApB,UACN,gDAEA,iDACA,8BAECN,OAAOC,KAAKN,GAASO,KAAI,SAACC,EAAKI,GAAN,OACxB,gCACC,uBAAO1B,KAAK,OAAOC,MAAOqB,EAAKpB,SAAU,SAACC,GAAD,OAf3B,SAACwB,EAAiBC,GACnC,IAAMC,EAAG,eAAQf,GACjBe,EAAID,GAAUC,EAAIF,UACXE,EAAIF,GACXZ,EAAWc,GAWwCC,CAAUR,EAAKnB,EAAEC,OAAOH,UACxE,uBAAOD,KAAK,OAAOC,MAAOa,EAAQQ,GAAMpB,SAAU,SAACC,GAAD,OAAOqB,EAAUF,EAAKnB,EAAEC,OAAOH,UAChFZ,EAAQyB,EAAQQ,KAAS,cAAC,EAAD,CAAO5B,MAAOoB,EAAQQ,GAAMpB,SAAU,SAACD,GAAD,OAAWuB,EAAUF,EAAKrB,QAHjFyB,QASZ,2CACA,cAAC,EAAD,CAAQ9B,MAlCK,SAACmC,GAAD,OACbhB,EAAW,2BAAKD,GAAN,kBAAgBiB,EAAO,aAmCjC,wCACA,8BAAK,+BAAOf,UCzFCgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCdAc,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,YAAc,4B","file":"static/js/main.5c7f52b2.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { HexColorPicker } from \"react-colorful\";\nimport \"react-colorful/dist/index.css\";\nimport css from './app.module.css';\n\n// isColor - ref https://stackoverflow.com/a/56266358/359825\nconst isColor = (strColor : string) => {\n\tconst s = new Option().style;\n\ts.color = strColor;\n\treturn s.color !== '';\n}\n\ninterface NewVarProps {\n\tonAdd?: Function;\n}\n\nconst NewVar : React.FC<NewVarProps> = ({ onAdd }) => {\n\tconst [ varName, setVarName ] = useState('');\n\n\tconst onClick = () => {\n\t\tif(onAdd) {\n\t\t\tonAdd(varName);\n\t\t\tsetVarName('');\n\t\t}\n\t}\n\n\treturn <div>\n\t\t<input type=\"text\" value={varName} onChange={(e) => setVarName(e.target.value)} />\n\t\t<button onClick={onClick}> Add css variable </button>\n\t</div>\n};\n\ninterface ColorProps {\n\tcolor: string;\n\tonChange: (newColor: string) => void;\n}\n\nconst Color : React.FC<ColorProps> = ({ color, onChange }) => {\n\tconst [showColorPicker, setShowColorPicker] = useState<boolean>(false);\n\tconst onClick = () => {\n\t\tsetShowColorPicker(!showColorPicker);\n\t}\n\n\treturn (\n\t\t<div className={css.color} onClick={onClick} style={{ background: color }}>\n\t\t\t<div className={css.colorPicker}>\n\t\t\t{showColorPicker && <HexColorPicker color={color} onChange={onChange} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\ntype CSSVarDict = { [name: string]: string };\n\nconst App : React.FC = () => {\n\tconst [cssVars, setCssVars] = useState({} as CSSVarDict);\n\n\tconst code = useMemo(() => {\n\t\tconst variablesAsCss = Object\n\t\t\t.keys(cssVars)\n\t\t\t.map((key) => `  --${key}: ${cssVars[key]};`)\n\t\t\t.join(\"\\n\");\n\n\t\treturn `:root {\\n${variablesAsCss}\\n}`;\n\t}, [ cssVars ]);\n\n\tconst onAdd = (name : string) =>\n\t\tsetCssVars({ ...cssVars, [name]: '#fff' });\n\n\tconst updateVar = (key : string, value : string) => {\n\t\tsetCssVars({\n\t\t\t...cssVars,\n\t\t\t[key]: value\n\t\t});\n\t}\n\n\tconst changeKey = (oldKey : string, newKey: string) => {\n\t\tconst tmp = { ...cssVars };\n\t\ttmp[newKey] = tmp[oldKey];\n\t\tdelete tmp[oldKey];\n\t\tsetCssVars(tmp);\n\t}\n\n\treturn <div className={css.app}>\n\t\t<h1> Color picker </h1>\n\n\t\t<h2> CSS variables </h2>\n\t\t<div>\n\t\t{\n\t\t\tObject.keys(cssVars).map((key, i) => (\n\t\t\t\t<div key={i}>\n\t\t\t\t\t<input type=\"text\" value={key} onChange={(e) => changeKey(key, e.target.value)} />\n\t\t\t\t\t<input type=\"text\" value={cssVars[key]} onChange={(e) => updateVar(key, e.target.value)} />\n\t\t\t\t\t{isColor(cssVars[key]) && <Color color={cssVars[key]} onChange={(value) => updateVar(key, value)} />}\n\t\t\t\t</div>\n\t\t\t))\n\t\t}\n\t\t</div>\n\n\t\t<h2> Add new </h2>\n\t\t<NewVar onAdd={onAdd}/>\n\n\t\t<h2> Code </h2>\n\t\t<pre><code>{code}</code></pre>\n\t</div>;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\",\"color\":\"app_color__2HesL\",\"colorPicker\":\"app_colorPicker__24jC7\"};"],"sourceRoot":""}